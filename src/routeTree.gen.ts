/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const TopRatedIndexLazyImport = createFileRoute('/topRated/')()
const ProfileIndexLazyImport = createFileRoute('/profile/')()
const LibraryIndexLazyImport = createFileRoute('/library/')()
const GamesIndexLazyImport = createFileRoute('/games/')()
const AdminIndexLazyImport = createFileRoute('/admin/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TopRatedIndexLazyRoute = TopRatedIndexLazyImport.update({
  id: '/topRated/',
  path: '/topRated/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/topRated/index.lazy').then((d) => d.Route),
)

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then((d) => d.Route))

const LibraryIndexLazyRoute = LibraryIndexLazyImport.update({
  id: '/library/',
  path: '/library/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/library/index.lazy').then((d) => d.Route))

const GamesIndexLazyRoute = GamesIndexLazyImport.update({
  id: '/games/',
  path: '/games/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/games/index.lazy').then((d) => d.Route))

const AdminIndexLazyRoute = AdminIndexLazyImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/games/': {
      id: '/games/'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof GamesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/library/': {
      id: '/library/'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/topRated/': {
      id: '/topRated/'
      path: '/topRated'
      fullPath: '/topRated'
      preLoaderRoute: typeof TopRatedIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/games': typeof GamesIndexLazyRoute
  '/library': typeof LibraryIndexLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/topRated': typeof TopRatedIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/games': typeof GamesIndexLazyRoute
  '/library': typeof LibraryIndexLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/topRated': typeof TopRatedIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/admin/': typeof AdminIndexLazyRoute
  '/games/': typeof GamesIndexLazyRoute
  '/library/': typeof LibraryIndexLazyRoute
  '/profile/': typeof ProfileIndexLazyRoute
  '/topRated/': typeof TopRatedIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/admin' | '/games' | '/library' | '/profile' | '/topRated'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/games' | '/library' | '/profile' | '/topRated'
  id:
    | '__root__'
    | '/'
    | '/admin/'
    | '/games/'
    | '/library/'
    | '/profile/'
    | '/topRated/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AdminIndexLazyRoute: typeof AdminIndexLazyRoute
  GamesIndexLazyRoute: typeof GamesIndexLazyRoute
  LibraryIndexLazyRoute: typeof LibraryIndexLazyRoute
  ProfileIndexLazyRoute: typeof ProfileIndexLazyRoute
  TopRatedIndexLazyRoute: typeof TopRatedIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AdminIndexLazyRoute: AdminIndexLazyRoute,
  GamesIndexLazyRoute: GamesIndexLazyRoute,
  LibraryIndexLazyRoute: LibraryIndexLazyRoute,
  ProfileIndexLazyRoute: ProfileIndexLazyRoute,
  TopRatedIndexLazyRoute: TopRatedIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin/",
        "/games/",
        "/library/",
        "/profile/",
        "/topRated/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.lazy.tsx"
    },
    "/games/": {
      "filePath": "games/index.lazy.tsx"
    },
    "/library/": {
      "filePath": "library/index.lazy.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.lazy.tsx"
    },
    "/topRated/": {
      "filePath": "topRated/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
